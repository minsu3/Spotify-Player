{"version":3,"sources":["integrations/spotify.react.js","App.js","serviceWorker.js","index.js"],"names":["clientSecret","process","accessToken","URLSearchParams","window","location","hash","substr","get","defaultDeviceId","console","warn","authenticateClientside","a","url","encodeURI","href","spotifetch","options","tokenHeader","headers","fetch","response","status","translateSpotifyResponse","success","json","responseJson","addDeviceId","targetDeviceId","context","deviceId","pause","method","searchItem","value","queryParam","List","props","log","className","searchResults","map","result","trackName","App","useState","text","currentSearchQuery","setCurrentSearchQuery","setSearchResults","handleSubmit","e","preventDefault","searchResponse","itemsArray","tracks","items","testArray","item","name","push","Button","variant","onClick","then","Form","style","display","FormControl","aria-label","aria-describedby","type","placeholder","onChange","target","key","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.8939ce43.chunk.js","sourcesContent":["// From spotify developer dashboard\nconst clientId = 'c684509b8e09406c8b08e1c6e9110d94';\nconst CLIENT_SECRET_ENV_VARIABLE_NAME = 'CHIHUAHUA_SPOTIFY_SECRET';\nconst clientSecret = process.env[CLIENT_SECRET_ENV_VARIABLE_NAME];\n\nconst parsedHash = new URLSearchParams(\n    window.location.hash.substr(1) // skip the first char (#)\n);\nconst accessToken = parsedHash.get('access_token');\n\nlet defaultDeviceId = null;\n\nif (clientSecret == null) {\n  console.warn(\n    `Spotify client secret was not found; please set it in your environment\n    variables to use Spotify integration.  Until then, serverside attempts to\n    communicate with Spotify will just log to the console :)`\n  );\n}\n\nif (accessToken == null) {\n  console.warn(\n    `No clientside access token found.  Try authenticating again.  Without this\n    access token, clientside attempts to communicate with Spotify will fail.`\n  )\n}\n\n// Use Spotify's Implicit Grant Flow to authorize without secret keys.  We can\n// run this function directly in the browser, no backend required\nconst authenticateClientside = async () => {\n  const scope = 'user-read-playback-state user-modify-playback-state';\n  const url = `https://accounts.spotify.com/authorize?client_id=${clientId}&redirect_uri=http:%2F%2Flocalhost:3000&scope=${encodeURI(scope)}&response_type=token`;\n  window.location.href = url;\n  return null;\n}\n\n// Spotify-specific wrapper around fetch.  Auto-injects the access token if it\n// exists, otherwise takes them to auth\nconst spotifetch = async (url, options) => {\n  if (accessToken == null) {\n    console.warn(\"No clientside access token.  Redirecting to authentication page...\");\n    return authenticateClientside();\n  }\n  const tokenHeader = {\n    'Authorization': 'Bearer ' + accessToken,\n  };\n  if (options == null) {\n    options = {headers: tokenHeader};\n    return fetch(url, options);\n  }\n  const headers = {\n    ...tokenHeader,\n    ...options.headers,\n  };\n  options.headers = headers;\n  const response = await fetch(url, options);\n  if (response.status === 401) authenticateClientside();\n  return response;\n}\n\n// For many requests, if it fails we get a descriptive JSON error, but success\n// returns nothing but a number (the status).  This function wraps success/failure\n// in a simple JSON object so we don't have to worry about type issues\nconst translateSpotifyResponse = async (response) => {\n  switch (response.status) {\n    case 204:\n      return {\n        success: true,\n      }\n    default:\n      return {\n        success: false,\n        responseJson: await response.json(),\n      }\n  }\n}\n\n// Add device ID for playback operations, falling back to the default.  If the\n// default is also null, Spotify will use the currently playing device\nconst addDeviceId = (url, targetDeviceId, context) => {\n  const deviceId = targetDeviceId || defaultDeviceId;\n  if (deviceId != null) {\n    return url + `&device_id=${deviceId}`;\n  } else {\n    console.warn(\n      `${context} was called with a null device id.\n      This will fail if the user is not listening on any devices right now`\n    );\n    return url;\n  }\n}\n\n// Get a list of the user's devices\nconst getDevices = async () => {\n  const response = await spotifetch('https://api.spotify.com/v1/me/player/devices');\n  const json = await response.json();\n  return json.devices;\n}\n\n// Add a song to the user's queue.  Spotify requires us to pass the song URI, not it's ID!\nconst enqueueSong = async (trackUri, deviceId) => {\n  const url = addDeviceId(\n    `https://api.spotify.com/v1/me/player/queue?uri=${trackUri}`,\n    deviceId,\n    'enqueueSong()',\n  );\n  const response = await spotifetch(url, {method: 'POST'});\n  return translateSpotifyResponse(response);\n}\n\nconst play = async (trackUri, deviceId) => {\n  const url = addDeviceId(\n    'https://api.spotify.com/v1/me/player/play',\n    deviceId,\n    'play()',\n  );\n  const response = await spotifetch(url, {\n    method: 'PUT',\n    body: trackUri ? JSON.stringify({\n      uris: [trackUri],\n    }) : '{}',\n  });\n  return translateSpotifyResponse(response);\n}\n\nconst pause = async (deviceId) => {\n  const url = addDeviceId(\n    'https://api.spotify.com/v1/me/player/pause',\n    deviceId,\n    'pause()',\n  );\n  const response = await spotifetch(url, {\n    method: 'PUT',\n  });\n  return translateSpotifyResponse(response);\n}\n\nconst searchItem = async (value) => {\n  const queryParam = encodeURI(value)\n  const response = await spotifetch(`https://api.spotify.com/v1/search?q=${queryParam}&type=track`);\n  const json = await response.json()\n  return json\n}\n\nconst setDefaultDevice = deviceId => {\n  defaultDeviceId = deviceId;\n}\n\nexport { authenticateClientside, getDevices, searchItem, pause, setDefaultDevice };\n\n// To test if Spotify integration works from your computer, run `node src/integrations/spotify.js`\n","import React, { useState } from 'react';\nimport './App.css';\nimport FormControl from \"react-bootstrap/FormControl\";\nimport Button from 'react-bootstrap/Button';\nimport PlayBackDeviceSelector from './components/PlaybackDeviceSelector.react.js';\nimport Form from \"react-bootstrap/Form\";\nimport {\n  authenticateClientside,\n  searchItem,\n  pause,\n} from \"./integrations/spotify.react.js\";\n\nfunction List(props) {\n  console.log('searchResults = ', props)\n\n  return (\n    <div className=\"list\">\n      {props.searchResults.map(result => <p className=\"render\">\n        {result.trackName}\n      </p>)}\n    </div>\n  )\n}\n\nfunction App() {\n  const [currentSearchQuery, setCurrentSearchQuery] = useState({\n    text: ''\n  })\n\n  const [searchResults, setSearchResults] = useState([]);\n\n  const play = () => {\n    console.log('play.  Attempting to connect to backend; you should see something print after this')\n    fetch('/play').then(console.log);\n  }\n\n  const handleSubmit = async e => {\n    e.preventDefault()\n    let searchResponse = await searchItem(currentSearchQuery)\n    console.log(searchResponse)\n    let itemsArray = searchResponse.tracks.items\n    let testArray = [];\n    for(let item of itemsArray) {\n      let trackName = {\n        \"trackName\": item.name\n      }\n      testArray.push(trackName)\n    }\n    setSearchResults(testArray)\n    console.log('Track Name = ', testArray)\n  }\n\n  const authenticate = () => {\n    authenticateClientside();\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"App-header\">\n      <h1 className=\"title\">Spotify Player</h1>\n        \n        <Button variant=\"primary\" onClick={() => play()}>\n          Play\n        </Button>{\" \"}\n        <Button variant=\"primary\" onClick={() => pause()}>\n          Pause\n        </Button>{\" \"}\n        <Form\n          style={{ display: \"inline-block\" }}\n        >\n          <FormControl\n            aria-label=\"Default\"\n            aria-describedby=\"inputGroup-sizing-default\"\n            type=\"text\"\n            placeholder=\"Enter song name...\"\n            onChange={(e) => setCurrentSearchQuery(e.target.value)}\n          />\n        </Form>\n        <Button\n          type=\"submit\"\n          className=\"submit\"\n          onClick={handleSubmit}\n        >\n          Submit\n        </Button>{\" \"}\n        <Button variant=\"primary\" onClick={authenticate} className=\"authenticate\">Authenticate</Button>\n\n        <List\n          searchResults={searchResults}\n          key={searchResults}\n        />\n\n      </div>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}